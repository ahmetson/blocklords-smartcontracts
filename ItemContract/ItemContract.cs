using Neo.SmartContract.Framework;using Neo.SmartContract.Framework.Services.Neo;using Neo.SmartContract.Framework.Services.System;using System.Numerics;/***  Items increases the basic Stats of heroes.*  *  Version: 1.0*  Author: Medet Ahmetson*   *   *  Item parameters are:*  *  ITEM ID (13)    STAT VALUE (4)  MAX STAT VALUE (4)   STAT TYPE (1) QUALITY (1)  OWNER ADDRESS (33)*/namespace Blocklords{    public class ItemContract : SmartContract    {        // Item Parameters Locations        private static readonly int statValueIndex      = 0;  //0123        private static readonly int maxStatValueIndex   = 4;  //4567        private static readonly int statTypeIndex       = 8;  //8        private static readonly int qualityIndex        = 9;  //9        private static readonly int addressIndex        = 10; //10        private static readonly int statValueLength     = 4;        private static readonly int maxStatValueLength  = 4;        private static readonly int statTypeLength      = 1;        private static readonly int qualityLength       = 1;        private static readonly int addressLength       = 33;        private static readonly int itemIdLength        = 13;        // 0.01 GAS        private static readonly decimal fee = 0.01m * 100_000_000;        private static readonly string contractAddress = "";        private static byte[] GetFalseByte()        {            return new BigInteger(0).AsByteArray();        }        private static byte[] GetTrueByte()        {            return new BigInteger(1).AsByteArray();        }        public static byte[] Main(string operation, object[] args)        {            /*if (operation == "put" ||                   operation == "update" ||                  operation == "transfer" )            {                if (!Runtime.CheckWitness((byte[])args[0]))                {                    Runtime.Log("Authorization failed!");                    return GetFalseByte();                }            }*/            // @Param Item ID            if (operation.Equals("get"))                 return Get((string)args[0]);            // @Param Item ID, Item Parameters            if (operation.Equals("put"))                 return Put((string)args[1], (string)args[2]);            // @Param Item ID, Item Parameters            if (operation.Equals("increaseStat"))              return IncreaseStat((string)args[1], new BigInteger((int)args[2]));            // @Param Item ID, From Address, To Address            if (operation.Equals("transfer"))            return Transfer((string)args[1], (string)args[0], (string)args[2]);               return GetFalseByte();        }        private static byte[] Get(string itemId)        {            // Validate input            if (!IsValidItemId(itemId))            {                Runtime.Log("Invalid Item ID parameter!");                return GetFalseByte();            }            byte[] item = Storage.Get(Storage.CurrentContext, itemId);            Runtime.Log("Item is "+item.AsString());            return item;        }        private static byte[] Put(string itemId, string itemParams)        {            // Validate input            if (!IsValidItemId(itemId))            {                Runtime.Log("Invalid Item ID parameter!");                return GetFalseByte();            }            if (!IsValidItemParams(itemParams))            {                return GetFalseByte();            }            /*if (!IsTransactionFeeIncluded())            {                Runtime.Log("Required to include the Item fee!");                return GetFalseByte();            }*/            Storage.Put(Storage.CurrentContext, itemId, itemParams);            return GetTrueByte();        }        private static byte[] IncreaseStat(string itemId, BigInteger increaseValue)        {            string item = Storage.Get(Storage.CurrentContext, itemId).AsString();            // Check does Item exists            if (!IsValidItemParams(item))            {                Runtime.Log("Error! Item not exists!");                return GetFalseByte();            }            /*if (!IsTransactionFeeIncluded())            {                Runtime.Log("Error! ransaction fee is not included!");                return GetFalseByte();            }*/            string valueString = item.Substring(ItemContract.statValueIndex, ItemContract.statValueLength);            string maxValueString = item.Substring(ItemContract.maxStatValueIndex, ItemContract.maxStatValueLength);            BigInteger value = valueString.AsByteArray().AsBigInteger();            BigInteger maxValue = maxValueString.AsByteArray().AsBigInteger();            BigInteger newValue = value + increaseValue;            if (newValue > maxValue)            {                Runtime.Log("ERROR! Stat goes over of Maximum Value");                return GetFalseByte();            }            string newValueString = GetZeroPrefixedString(newValue.AsByteArray().AsString(), ItemContract.statValueLength);            string newItem = newValueString + item.Substring(ItemContract.maxStatValueIndex, ItemContract.addressIndex + 1 + ItemContract.addressLength);            return PutOnStorage(itemId, newItem);        }        private static byte[] Transfer(string itemId, string fromAddress, string toAddress)        {            // Validate input            if (!IsValidItemId(itemId))            {                Runtime.Log("Invalid Item ID parameter!");                return GetFalseByte();            }            if (!IsValidWalletAddress(fromAddress))            {                return GetFalseByte();            }            if (!IsValidWalletAddress(toAddress))            {                return GetFalseByte();            }            if (!IsTransactionFeeIncluded())            {                Runtime.Log("Requires transaction fee!");                return GetFalseByte();            }            if (fromAddress.Equals(toAddress))            {                Runtime.Log("ERROR! Trying to Transfer Item to yourself!");                return GetFalseByte();            }            string fromItem = Storage.Get(Storage.CurrentContext, itemId).AsString();            // Check does Item exist            if (!IsValidItemParams(fromItem))            {                Runtime.Log("Error! Item not exists!");                return GetFalseByte();            }            string toItem = fromItem.Substring(0, ItemContract.addressIndex) + toAddress;            return ItemContract.PutOnStorage(itemId, toItem);        }        // VALIDATORS        private static bool IsTransactionFeeIncluded()        {            TransactionOutput[] outputs = ((Transaction)ExecutionEngine.ScriptContainer).GetOutputs();            foreach (TransactionOutput output in outputs)            {                if (output.ScriptHash.Equals(ExecutionEngine.EntryScriptHash))                {                    /*if (reference.AssetId.Equals(inputId))                    {                        return 0;                    }                    else                    {*/                    long value = output.Value;                    if (value.Equals(ItemContract.fee)) {                        return true;                    }                   // }                }            }            return false;        }        private static bool IsValidItemId(string itemId)        {            int length = itemId.Length;            return ItemContract.itemIdLength.Equals(length);        }        private static bool IsValidItemParams(string itemParams)        {            int itemLength = ItemContract.addressIndex + 1 + ItemContract.addressLength;            int itemParamsLength = itemParams.Length;            return itemLength.Equals(itemParamsLength);        }        private static bool IsValidWalletAddress(string address)        {            return address.Length.Equals(ItemContract.addressLength);        }            // HELPERS        private static string GetZeroPrefixedString(string toPrefix, int length)        {            if (toPrefix.Length.Equals(length))            {                return toPrefix;            }            string str = "";            int prefixesNumber = length - toPrefix.Length;            // Set Zero Prefixes            for (int i=0; i<prefixesNumber; i++)            {                str = str + "0";            }            // Set String Value after Prefixes            str = str + toPrefix;            return str;        }        private static byte[] PutOnStorage(string itemId, string itemParams)        {            Storage.Put(Storage.CurrentContext, itemId, itemParams);            return GetTrueByte();        }    }}